Until now, our programs have all executed sequentially.
[Start animation]
When the first line of code is finished, we move to the second; when that's done, we go on to the third line. When there are no more lines to execute, the program stops.
And every time we run the program, it's going to flow through the same sequence of steps in the same order.

In order to give our programs some flexibility in how they execute, we need to introduce the concept of decisions, which allow the program to run blocks of code based on certain conditions. 

[Advance to conditional statements]

To make decisions, our programs will use Boolean logic. Boolean logic is all based on the idea of true or false, which means that our program can make decisions based on yes or no questions only--there's no "maybe" in Boolean logic.

Is the amount the user entered greater than 10? That's either true or false. If it's true, we can execute a block of code. [CLICK]

If it's not true, we'll skip that block and move on with the program.

[CLICK]

At the heart of Boolean logic are Boolean variables and Boolean expressions.

[Next slide]

A Boolean variable can only have one of two values: true or false. In Java, we use the data type boolean to store these values.

[Click to show code]

`boolean` variables are generally named with a question or a statement that can be answered with true or false. `hasCar` is true or false, right? The valid values you can put in a boolean variable are `true` or `false`, in all lowercase and no quotes.

We'll see uses for `boolean` variables as we go along.

[Next slide]

The other common structure in Java that can be used for decisions is a Boolean expression. A Boolean expression is a statement that evaluates to true or false. Like arithmetic expressions, Boolean expressions use binary operators--operators that work on two operands. The most common boolean operations are comparisons, and you'll be familiar with these from your math classes.

The addition operation takes two operands to find a sum.

[Next slide]

"Relational operators" also take two operands, but they evaluate to a Boolean value. For example, 15 > 25 evaluates to false--15 is not greater than 25.

[Next slide]

There are six relational operators in Java. For our examples, we'll assume we have a couple of int variables defined.

[Chart enter]

The first operator is the equality operator, `==`. 

[Next highlight]

It checks if two values are equal. For example, age is equal to 17, which evaluates to false. This operator leads to a really common beginner mistake: using `=` instead of `==`. 

[Next - arrow]

A single = symbol *always* assigns a value to a variable, and a double == symbol *always* checks for equality. When I speak code out loud, I alway pronounce == as "is equal to" instead of "equals" to make it clear which one I mean.

[Next highlight]

The next operator is the not equal operator, `!=`. It checks if two values are not equal. For example, age is not equal to 17, which evaluates to true.

[Next highlight]

Less than and greater than work as you'd expect. These examples show that the two operands can be variables, literal values, or a combination of both.

And the last two operators are less than or equal to and greater than or equal to. Again, they work as you'd expect--but notice the symbols we use. In math, we got used to drawing specific symbols for these operations

[Next animation - symbols]

But we don't have characters like that on our keyboard, so we type them the way we'd speak them: "less than or equal to" is a less than symbol and the equals symbol. "Greater than or equal to" is a greater than symbol and the equals symbol.

[Next slide]

There are a few more operators we use in boolean logic, which we call "logical operators." These operators allow us to combine multiple boolean expressions into a single, more complex expression. We'll look at these closer when we start writing decision-making code, but for now, here they are:

[Next - drop table]

Two ampersands, or what you probably think of as two "and" symbols, is the logical AND operator.
[Next highlight]

 It returns true only if both operands are true. This example evaluates to true if age is greater than or equal to 18 AND age is less than or equal to 21. If age is too low or too high, the expression evaluates to false. It basically checks to see if age is between 18 and 21.

[Next - highlight]

The operator for "OR" is two vertical lines. These characters are called "pipe lines", or just "pipes". They're just above the return or enter key on your keyboard.

Logical OR returns true if at least one of the operands is true. This example evaluates to true if age is less than 18 OR the isRegistered variable is false. This expression checks to see if the user is either too young or not registered to vote.

[Next - highlight]

Last up is the logical NOT operator, which is an exclamation point. It inverts the value of a boolean expression. If the expression is true, NOT makes it false. If the expression is false, NOT makes it true.

[Next - remove highlight]

There's actually another logical operator called "exclusive or, but we don't use that and we'll ignore it for now since this chart is probably confusing enough already. As I said, we'll make sense out of these once we're able to start using them in our code.

[Next - last slide]

It might not be clear yet why we're spending time on this, but understanding Boolean logic is going to make it possible to write code that makes decisions. And that's what we'll look at next...