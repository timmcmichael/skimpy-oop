We've learned a couple ways to use if statements to add some flexibility to our decisions. Sometimes we need to make what we might call a "hierarchical" decision, where we make one big decision, and once we've done that we drill down into a more specific choice. 

For example, when the server hands you a menu at a restaurant, you first have to decide if you're going to order from the breakfast, lunch, or dinner options. Once you've made that decision, you can look at the specific choices for that meal. In coding, we can make this kind of hierarchical decision with a nested if statement.

I'm an old fashioned guy. Well, I'm an old guy, but I'm also old fashioned. When I was young and there was no Spotify, we'd go to the record store to get music we wanted. Like everyone else my age, I always thought it'd be cool to own a record store. So we're going to consider a simple record store inventory system to learn about nested if statements.

We're going to work with a class called `VinylRecord`, with a demo program called `VinylRecordDemo`. The code for both files is available from the GitHub repository for this course, which is linked in description and in the eBook.

This is going to be a class for an inventory and pricing application for a record store. The shop prices albums based on their genre.

[Show price chart]

This chart shows a few genres and their corresponding prices. General "Rock" albums are $15, but "Classic Rock" and "Grunge" cost a little more, at 20 and 25 dollars. And while general Blues albums are $25, Chicago Blues and Delta Blues are priced higher.

And anything that's not a Rock or Blues album gets a price of $10.

Just like our restaurant menu example, determining the price of a specific record is a hierarchical decision. We first need to decide if the album is Rock, Blues, or something else. Once we've made that decision, we can make a more specific decision to establish the price.

Here's a diagram of the class we'll use. First, notice that there are a couple methods on the diagram that aren't in our code: we're missing the constructor and the `setGenre()` method. 

And there are a couple other things to point out. The `setGenre()` method doesn't follow our usual pattern--it's one setter for two different fields. And there's no `setPrice()` method at all, so there's no way to get a value into that field.

I've designed it that way because, since the price is determined by the genre and subgenre, there's no need to set the price directly. In fact, if we let someone set the price directly they might price it wrong. So we'll take care of setting the price in the `setGenre()` method.

Let's take a quick look at the Demo class, because I have some test code in place there already. This create four albums and uses setters to put the data in--and then there's commented out code to use the constructor, once we have that done.

But more interesting is that I created a method called displayRecord() that outputs all of the data for a VinylRecord object. It order to make sure the class is working, I end up having all kinds of println() statements. As a general rule, if you find yourself copy/pasting code, you should probably be using a method instead.

We call this a helper method, because it really just helps us test the class and doesn't have a role outside of this context. And for that reason, I made it private. It accepts a VinylRecord object as a parameter, and then prints out all of the data for that object. Remember this code when you need an example of how you can pass an object into a method.

Incidentally, there is another way to solve this problem of displaying all the data--but we'll save that for a future video.

Okay, let's go back to our object class and create the header for `setGenre()`. It's a void method with parameters for the genre and subgenre. The body will be like other setters, but with two assignments statements instead of one.

Once we've set those fields, we can set the price. First up, we'll create an if block to check if the genre is "Rock". Remember that we can't use the `==` operator to compare strings; we'll use the `equals()` method.

If it is a Rock album, we still need to check the subgenre, so for now, I'll just set the price to $15, which is the default for a rock album, and get the rest of this "top level" decision in place.

If it's not a Rock album, we need to check if it's a Blues album. That means adding an else-if statement with another equals() call. The default for a Blues album is $25, so we'll set the price to that.

And finally, we need a catch-all else block for anything that's not Rock or Blues. We'll set the price to $10 in this block.

If we think of that idea of a hierachical decision, this would be the top-level decision--it's the decision we have to make first, like breakfast, lunch, or dinner.

This is a good place to go over to the demo class and make sure it's working so far.

// Create a three records, Rock, Blues, and Hip-Hop.

This shows that our top-level decision structure is working, so now we can focus on the next level of decisions.

Inside the block for our Rock albums, we need to look at the subgenre of the record. My if statement will check to see if it's Classic Rock; if so, we'll set the price to $20.0.

We'll need an else-if statement to check for Grunge albums, and set the price to $25.0.

And we'll need an else block to catch any other Rock albums, which is that $15.0 default.

Let's give that a shot and see how we're doing.

Okay, so now it's just a matter of applying the same kind of structure to our Blues genre. The first if block will check for Chicago Blues, and set the price to $30.0.

The else-if block will check for Delta Blues, and set the price to $35.0.

And the else block will set the price to $25.0.

All of this is followed by our else statement that sets the price to $10.0, but if we had more genres, we could just keep adding else-if blocks and then if-else statements within those for subgenre pricing.

We should be ready for our final test now.

And that's how we can use nested if statements. This gives us a way to make broad decisions first, and then drill down into more specific decisions. This is a common pattern in programming, and it's a good way to structure our code when we have a series of related decisions to make.
